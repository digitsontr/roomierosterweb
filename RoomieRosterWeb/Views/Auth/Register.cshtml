@model RoomieRosterWeb.Models.SignUpDto
@{
    Layout = "/Views/Shared/_AuthLayout.cshtml";
    var errors = ViewData.ModelState.Values.SelectMany(v => v.Errors);
}


<div class="container my-auto">
    @if (errors.Any())
    {
        <div class="alert alert-danger">
            <ul>
                @foreach (var error in errors)
                {
                    <li>@error.ErrorMessage</li>
                }
            </ul>
        </div>
    }
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body d-flex flex-column">
                    <div class="custom-login-icon-container rounded-circle text-center align-self-center">
                        <span class="bi bi-lock custom-login-icon"></span>
                    </div>
                    <h1 class="card-title text-center mt-4 mb-4">Kayıt Ol</h1>

                    <form asp-action="Register" id="register" asp-controller="Auth" method="post" enctype="multipart/form-data" novalidate>
                        <div class="d-flex flex-row justify-content-between px-2">
                            <div class="form-group ms-3 w-50">
                                <input asp-for="FirstName" name="firstname" autocomplete="off" class="form-control" id="firstname" required>
                                <label asp-for="FirstName" class="control-label">İsim*</label>
                            </div>
                            <div class="form-group w-50">
                                <input asp-for="LastName" name="lastname" autocomplete="off" type="text" class="form-control" id="lastname" required>
                                <label asp-for="LastName" class="control-label">Soyisim*</label>
                            </div>
                        </div>
                        <div class="d-flex flex-row justify-content-between px-2">
                            <div class="form-group ms-3 w-50">
                                <select asp-for="Gender" name="gender" autocomplete="off" class="form-select" aria-label="Gender">
                                    <option value="0">Erkek</option>
                                    <option value="1">Kadın</option>
                                    <option selected>Cinsiyet</option>
                                </select>
                            </div>
                            <div class="form-group w-50">
                                <input asp-for="Username" name="username" autocomplete="off" type="text" class="form-control" id="username" required>
                                <label asp-for="Username" class="control-label">Kullanıcı Adı*</label>
                            </div>
                        </div>
                        <div class="form-group ms-4">
                            <input asp-for="BirthDay" class="form-control" autocomplete="off" name="birthday" type="date" placeholder="  " id="birthday" required>
                            <label asp-for="BirthDay" class="control-label">Doğum Tarihi*</label>
                        </div>
                        <div class="form-group ms-4">
                            <input asp-for="Email" type="email" name="email" autocomplete="off" class="form-control" id="email">
                            <label asp-for="Email" class="control-label">E posta*</label>
                        </div>
                        <div class="form-group ms-4">
                            <input asp-for="Password" type="password" autocomplete="off" name="password" class="form-control" id="password" required>
                            <label asp-for="Password" class="control-label">Parola*</label>
                        </div>
                        <div class="form-group ms-4">
                            <input type="password" name="confirmPassword" autocomplete="off" class="form-control" id="confirmPassword" required>
                            <label for="confirmPassword" class="control-label">Parola Tekrarı*</label>
                        </div>
                        <div class="d-flex ms-4 mb-4">
                            <div class="d-flex justify-content-center me-4">
                                <img id="selectedAvatar" src="https://mdbootstrap.com/img/Photos/Others/placeholder-avatar.jpg"
                                     class="rounded-circle" style="width: 50px; height: 50px; object-fit: cover;" alt="profile photo" />
                            </div>
                            <div class="d-flex justify-content-center w-100">
                                <div class="btn btn-primary btn-rounded custom-blue-button w-100">
                                    <label class="form-label text-white me-1 ms-1 mt-1" for="profilephoto">Profil Resmi Yükle</label>
                                    <input type="file" class="form-control d-none" name="profilephoto" accept="image/*" id="profilephoto" onchange="displaySelectedImage(event, 'selectedAvatar')" />
                                </div>
                            </div>
                        </div>
                        <div class="form-group ms-4">
                            <button type="submit" class="btn btn-primary w-100 custom-blue-button">Kayıt ol</button>
                            <div class="text-end mt-4">
                                <a href="/Auth/Login" class="text-secondary">Hesabın var mı? Giriş Yap</a>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <p class="text-center mt-5">
        &copy; 2024 - RoomieRoster by <a href="https://www.digitson.com.tr" class="digitsonLink">
            <img src="~/img/db1.png" width="70" />
        </a>
    </p>
</div>

<script>window.addEventListener('DOMContentLoaded', function () {
        $.validator.addMethod('customSelectCheck', function (value, element) {
            return value === '0' || value === '1';
        }, "Lütfen geçerli bir seçenek seçin.");

        $.validator.addMethod("ageCheck", function (value, element, params) {
            var dob = new Date(value);
            var today = new Date();
            var age = today.getFullYear() - dob.getFullYear();

            var month = today.getMonth() - dob.getMonth();
            if (month < 0 || (month === 0 && today.getDate() < dob.getDate())) {
                age--;
            }

            return age >= params;
        }, $.validator.format("En az {0} yaşında olmalısınız."));

        $.validator.addMethod("customEmail", function (value, element) {
            return this.optional(element) || /^[a-zA-Z0-9._%+-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(value);
        }, "Lütfen geçerli bir e-posta adresi girin");

        $.validator.addMethod("passwordMatch", function (value, element, params) {
            var password = $("#password").val();

            return password === value;
        }, "Şifreler eşleşmiyor.");

        $.validator.addMethod("onlyLetters", function (value, element) {
            return this.optional(element) || /^[a-zA-ZğüşıöçĞÜŞİÖÇ]+$/i.test(value);
        }, "Sadece harf kullanınız.");

        $.validator.addMethod("validUsername", function (value, element) {
            return this.optional(element) || /^[a-zA-Z0-9._]+$/i.test(value);
        }, "Sadece harf, rakam, nokta ve alt çizgi kullanınız.");

        $.validator.addMethod("strongPassword", function (value, element) {
            if (value.length < 6) return false;

            if (!/[A-Z]/.test(value)) return false;

            if (!/[a-z]/.test(value)) return false;

            if (!/\d/.test(value)) return false;

            if (!/^[a-zA-Z0-9]+$/.test(value)) return false;
            return true;
        }, "Şifreniz en az 6 karakter uzunluğunda olmalı ve en az bir büyük harf, bir küçük harf ve bir rakam içermelidir.");



        $('#register').validate({
            errorElement: "div",
            errorPlacement: function (error, element) {
                error.addClass("invalid-feedback");
                error.insertAfter(element);
            },
            highlight: function (element, errorClass, validClass) {
                $(element).addClass("is-invalid").removeClass("is-valid");
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).addClass("is-valid").removeClass("is-invalid");
            },

            rules: {
                firstname: {
                    required: true,
                    minlength: 3,
                    onlyLetters: true
                },
                lastname: {
                    required: true,
                    minlength: 3,
                    onlyLetters: true
                },
                gender: {
                    required: true,
                    customSelectCheck: true
                },
                username: {
                    required: true,
                    minlength: 5,
                    validUsername: true
                },
                birthday: {
                    required: true,
                    ageCheck: 18
                },
                email: {
                    required: true,
                    customEmail: true,
                    email: false
                },
                password: {
                    required: true,
                    strongPassword: true
                },
                confirmPassword: {
                    required: true,
                    passwordMatch: true,
                    strongPassword: true
                }
            },
            messages: {
                firstname: {
                    required: "İsim alanı boş bırakılamaz.",
                    minlength: "İsim en az 3 karakterden oluşmalıdır.",
                    onlyLetters: "İsim sadece harf içerebilir."
                },
                lastname: {
                    required: "Soyisim alanı boş bırakılamaz.",
                    minlength: "Soyisim en az 3 karakterden oluşmalıdır.",
                    onlyLetters: "Soyisim sadece harf içerebilir"
                },
                gender: {
                    customSelectCheck: "Lütfen geçerli bir cinsiyet seçin."
                },
                username: {
                    required: "Kullanıcı adı alanı boş bırakılamaz.",
                    minlength: "Kullanıcı adı en az 5 karakter olmalıdır",
                },
                birthday: {
                    required: "Doğum tarihi boş bırakılamaz."
                },
                email: {
                    required: "E mail alanı boş bırakılamaz.",
                },
                password: {
                    required: "Parola alanı boş bırakılamaz."
                },
                confirmPassword: {
                    required: "Parola alanı boş bırakılamaz."
                }
            },
            submitHandler: function () {
                $('#register').submit();
            },
            showErrors: function () {
                $('.form-control.is-valid').each((key, element) => {
                    $(element).siblings('label').css('bottom', '50px');
                });

                this.defaultShowErrors();

                $('.form-control.is-invalid').each((key, element) => {
                    let labelHeight = ($(element).siblings('.invalid-feedback').height() || 0) + 50;

                    if (labelHeight > 50) {
                        labelHeight += 10;
                    }

                    $(element).siblings('label').css('bottom', labelHeight + 'px');
                });
            }
        });
    });

    function displaySelectedImage(event, elementId) {
        const selectedImage = document.getElementById(elementId);
        const fileInput = event.target;

        if (fileInput.files && fileInput.files[0]) {
            const reader = new FileReader();

            reader.onload = function (e) {
                selectedImage.src = e.target.result;
            };

            reader.readAsDataURL(fileInput.files[0]);
        }
    }</script>
